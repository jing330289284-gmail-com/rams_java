<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="jp.co.lyc.cms.mapper.EmployeeInfoMapper">
	<resultMap id="Employee"
		type="jp.co.lyc.cms.model.EmployeeModel" />
	<resultMap id="stringResult"
		type="String" />
	<select id="getEmployeeInfo" parameterType="map"
		resultMap="Employee">
		SELECT
		(@rowNo:=@rowNo + 1) AS rowNo,
		T001.employeeNo,
		CONCAT(T001.employeeFristName,' ',T001.employeeLastName)as
		employeeFristName ,
		T002.Furigana,
		T002.alphabetName,
		T002.birthday,
		T002.intoCompanyYearAndMonth,
		T006.AdmissionStartDate,
		T005.salary,
		T007.customerName,
		T002.phoneNo,
		T003.postcode,
		T003.firstHalfAddress,
		T003.lastHalfAddress,
		T003.stationCode1,
		TIMESTAMPDIFF(MONTH,
		NOW(),
		T002.stayPeriod) AS stayPeriod,
		T002.resumeInfo1,
		T002.resumeInfo2,
		T002.residentCardInfo
		<include refid="tableJoin" />
		WHERE
		1 = 1
		<if test="employeeNo!=null">
			AND T001.employeeNo=#{employeeNo}
		</if>
		<if test="employeeFristName!=null">
			AND T001.employeeFristName like
			concat('%',#{employeeFristName},'%')
		</if>
		<if test="employeeFormCode!=null">
			AND T002.employeeFormCode=#{employeeFormCode}
		</if>
		<if test="employeeStatus!=null">
			AND T002.status=#{employeeStatus}
		</if>
		<if test="genderStatus!=null">
			AND T002.genderStatus=#{genderStatus}
		</if>
		<if test="ageFrom != null">
			AND T002.birthday &lt;= #{ageFrom}+9999
		</if>
		<if test="ageTo != null">
			AND T002.birthday &gt;= #{ageTo}
		</if>
		<if test="residenceCode != null">
			AND T002.residenceCode=#{residenceCode}
		</if>
		<if test="nationalityCode != null">
			AND T002.nationalityCode=#{nationalityCode}
		</if>
		<if test="customer!= null">
			AND T007.customerName=#{customer}
		</if>
		<if test="intoCompanyCode!= null">
			AND T002.intoCompanyCode=#{intoCompanyCode}
		</if>
		<if test="japaneaseLevelCode!=  null">
			AND T002.japaneseLevelCode=#{japaneaseLevelCode}
		</if>
		<if test="developLanguage1 != null">
			AND T002.developLanguage1=#{developLanguage1}
		</if>
		<if test="developLanguage2 != null">
			AND T002.developLanguage2=#{developLanguage2}
		</if>
		<if test="developLanguage3!= null">
			AND T002.developLanguage3=#{developLanguage3}
		</if>
		<if test="intoCompanyYearAndMonthFrom != null">
			AND T002.intoCompanyYearAndMonth
			&gt;=#{intoCompanyYearAndMonthFrom}
		</if>
		<if test="intoCompanyYearAndMonthTo!= null">
			AND T002.intoCompanyYearAndMonth
			&lt;=#{intoCompanyYearAndMonthTo}
		</if>
		<if test="kadou!=null">
			<if test="kadou='0'">
				AND T006.AdmissionStartDate is not null AND
				T006.AdmissionEndDate is
				null
			</if>
			<if test="kadou='1'">
				AND T006.AdmissionStartDate is null AND
				T006.AdmissionEndDate is not
				null
			</if>
		</if>
		ORDER BY
		T001.employeeNo
		DESC
	</select>

	<!-- 社員情報を追加 -->
	<insert id="insertEmployeeInfo" parameterType="String">
		INSERT INTO
		T001Employee (
		employeeNo,
		employeeFristName,
		employeeLastName,
		password,
		authorityCode,
		updateTime,
		createTime,
		updateUser
		)
		VALUES(
		#{employeeNo},
		#{employeeFristName},
		#{employeeLastName},
		#{password},
		#{authorityCode},
		NOW(),
		NOW(),
		#{updateUser}
		)
	</insert>

	<!-- 社員情報詳細を追加 -->
	<insert id="insertEmployeeInfoDetail" parameterType="String">
		INSERT INTO
		T002EmployeeDetail (
		employeeNo,
		genderStatus,
		birthday,
		japaneseCalendar,
		alphabetName,
		furigana,
		nationalityCode,
		birthplace,
		intoCompanyCode,
		intoCompanyYearAndMonth,
		employeeStatus,
		retirementYearAndMonth,
		myNumber,
		occupationCode,
		employeeFormCode,
		comeToJapanYearAndMonth,
		graduationUniversity,
		graduationYearAndMonth,
		major,
		residenceCode,
		residenceCardNo,
		stayPeriod,
		japaneseLevelCode,
		englishLevelCode,
		developLanguage1,
		developLanguage2,
		developLanguage3,
		developLanguage4,
		developLanguage5,
		certification1,
		certification2,
		resumeInfo1,
		resumeRemark1,
		resumeInfo2,
		resumeRemark2,
		residentCardInfo,
		passportInfo,
		companyMail,
		phoneNo,
		employmentInsuranceNo,
		departmentCode,
		updateTime,
		createTime,
		updateUser,
		picInfo,
		yearsOfExperience,
		siteRoleCode
		)
		VALUES(
		#{employeeNo},
		#{genderStatus},
		#{birthday},
		#{japaneseCalendar},
		#{alphabetName},
		#{furigana},
		#{nationalityCode},
		#{birthplace},
		#{intoCompanyCode},
		#{intoCompanyYearAndMonth},
		#{employeeStatus},
		#{retirementYearAndMonth},
		#{myNumber},
		#{occupationCode},
		#{employeeFormCode},
		#{comeToJapanYearAndMonth},
		#{graduationUniversity},
		#{graduationYearAndMonth},
		#{major},
		#{residenceCode},
		#{residenceCardNo},
		#{stayPeriod},
		#{japaneseLevelCode},
		#{englishLevelCode},
		#{developLanguage1},
		#{developLanguage2},
		#{developLanguage3},
		#{developLanguage4},
		#{developLanguage5},
		#{certification1},
		#{certification2},
		#{resumeInfo1},
		#{resumeRemark1},
		#{resumeInfo2},
		#{resumeRemark2},
		#{residentCardInfo},
		#{passportInfo},
		#{companyMail},
		#{phoneNo},
		#{employmentInsuranceNo},
		#{departmentCode},
		NOW(),
		NOW(),
		#{updateUser},
		#{picInfo},
		#{yearsOfExperience},
		#{siteRoleCode}
		)
	</insert>

	<!-- 社員情報を削除 -->
	<delete id="deleteEmployeeInfo" parameterType="String">
		DELETE
		FROM
		T001Employee
		WHERE
		employeeNo = #{employeeNo};
	</delete>
	<!-- 社員情報詳細を削除 -->
	<delete id="deleteEmployeeInfoDetail" parameterType="String">
		DELETE
		FROM
		T002EmployeeDetail
		WHERE
		employeeNo = #{employeeNo};
	</delete>

	<!-- 住所情報を削除 -->
	<delete id="deleteAddressInfo" parameterType="String">
		DELETE
		FROM
		T003AddressInfo
		WHERE
		employeeNo = #{employeeNo};
	</delete>

	<!-- -->
	<select id="getEmployeeByEmployeeNo" parameterType="map"
		resultMap="Employee">
		SELECT
		<include refid="T001" />
		<include refid="T002" />
		<include refid="T003" />
		<include refid="tableJoin" />
		WHERE
		1 = 1
		AND T001.employeeNo=#{employeeNo}
	</select>
	<!-- 社員情報を修正 -->
	<update id="updateEmployeeInfo" parameterType="String">
		UPDATE
		T001Employee
		SET
		employeeFristName =#{employeeFristName},
		employeeLastName =#{employeeLastName},
		password=#{password},
		authorityCode =#{authorityCode},
		updateTime = NOW(),
		updateUser =
		#{updateUser}
		WHERE
		employeeNo = #{employeeNo}
	</update>
	<!-- 社員情報詳細を修正 -->
	<update id="updateEmployeeInfoDetail" parameterType="String">
		UPDATE
		T002EmployeeDetail
		SET
		genderStatus=#{genderStatus},
		birthday=#{birthday},
		japaneseCalendar=#{japaneseCalendar},
		furigana=#{furigana},
		nationalityCode=#{nationalityCode},
		birthplace=#{birthplace},
		intoCompanyCode=#{intoCompanyCode},
		intoCompanyYearAndMonth=
		#{intoCompanyYearAndMonth},
		employeeStatus=#{employeeStatus},
		retirementYearAndMonth=#{retirementYearAndMonth},
		myNumber=
		#{myNumber},
		occupationCode=#{occupationCode},
		comeToJapanYearAndMonth=#{comeToJapanYearAndMonth},
		graduationUniversity=#{graduationUniversity},
		graduationYearAndMonth
		=#{graduationYearAndMonth},
		major=#{major},
		residenceCode=
		#{residenceCode},
		residenceCardNo=#{residenceCardNo},
		stayPeriod=
		#{stayPeriod},
		japaneseLevelCode=#{japaneseLevelCode},
		englishLevelCode=#{englishLevelCode},
		developLanguage1=
		#{developLanguage1},
		developLanguage2=#{developLanguage2},
		developLanguage3=#{developLanguage3},
		developLanguage4=
		#{developLanguage4},
		developLanguage5=#{developLanguage5},
		japaneseCalendar=#{japaneseCalendar},
		certification1=
		#{certification1},
		certification2=#{certification2},
		resumeInfo1=
		#{resumeInfo1},
		resumeRemark1=#{resumeRemark1},
		resumeInfo2=
		#{resumeInfo2},
		resumeRemark2=#{resumeRemark2},
		residentCardInfo=
		#{residentCardInfo},
		passportInfo=#{passportInfo},
		companyMail=
		#{companyMail},
		phoneNo=#{phoneNo},
		employmentInsuranceNo=
		#{employmentInsuranceNo},
		siteRoleCode=
		#{siteRoleCode},
		updateTime=NOW(),
		updateUser=
		#{updateUser}
		WHERE
		employeeNo=
		#{employeeNo}
	</update>
	<!-- アドレスを修正 -->
	<update id="updateAddressInfo" parameterType="String">
		UPDATE
		T003AddressInfo
		SET
		postcode=#{postcode},
		firstHalfAddress=#{firstHalfAddress},
		lastHalfAddress=#{lastHalfAddress},
		stationCode1=(SELECT
		coalesce(stationCode,-1) from M013Station where
		stationName=#{nearestStation} ),
		updateTime=NOW(),
		updateUser=#{updateUser}
		WHERE
		employeeNo=#{employeeNo}
	</update>
	<sql id="T001">
		T001.employeeNo,
		T001.employeeFristName,
		T001.employeeLastName,
		T001.password,
		T001.authorityCode,
		T001.updateTime,
		T001.createTime,
		T001.updateUser,
	</sql>
	<sql id="T002">
		T002.employeeNo,
		T002.genderStatus,
		T002.birthday,
		T002.japaneseCalendar,
		T002.alphabetName,
		T002.furigana,
		SUBSTRING_INDEX(T002.furigana, ' ',1) furigana1,
		SUBSTRING_INDEX(T002.furigana, ' ',-1) furigana2,
		T002.nationalityCode,
		T002.birthplace,
		T002.intoCompanyCode,
		T002.intoCompanyYearAndMonth,
		T002.employeeStatus,
		T002.retirementYearAndMonth,
		T002.myNumber,
		T002.occupationCode,
		T002.employeeFormCode,
		T002.comeToJapanYearAndMonth,
		T002.graduationUniversity,
		T002.graduationYearAndMonth,
		T002.major,
		T002.residenceCode,
		T002.residenceCardNo,
		T002.stayPeriod,
		T002.japaneseLevelCode,
		T002.englishLevelCode,
		T002.developLanguage1,
		T002.developLanguage2,
		T002.developLanguage3,
		T002.developLanguage4,
		T002.developLanguage5,
		T002.certification1,
		T002.certification2,
		T002.resumeInfo1,
		T002.resumeRemark1,
		T002.resumeInfo2,
		T002.resumeRemark2,
		T002.residentCardInfo,
		T002.passportInfo,
		T002.companyMail,
		T002.phoneNo,
		T002.employmentInsuranceNo,
		T002.departmentCode,
		T002.siteRoleCode,
		T002.updateTime,
		T002.createTime,
		T002.updateUser,
		T002.yearsOfExperience,
	</sql>
	<sql id="T003">
		T003.employeeNo,
		T003.postcode,
		T003.firstHalfAddress,
		T003.lastHalfAddress,
		T003.stationCode1,
		T003.stationCode2,
		T003.housingStatus,
		T003.createTime,
		T003.updateUser
	</sql>
	<sql id="tableJoin">
		FROM
		T001Employee AS T001
		LEFT JOIN
		T002EmployeeDetail AS T002
		ON
		T002.employeeNo =
		T001.employeeNo
		LEFT JOIN
		T006EmployeeSiteInfo AS
		T006
		ON T001.employeeNo
		= T006.employeeNo
		AND admissionStartDate =
		(SELECT
		MAX(admissionStartDate)
		FROM
		T006EmployeeSiteInfo)
		LEFT
		JOIN
		T003AddressInfo AS T003
		ON
		T001.employeeNo =
		T003.employeeNo
		LEFT
		JOIN
		rams.M013Station AS M013 ON
		T003.stationCode1 =
		M013.stationCode
		LEFT
		JOIN
		T005ExpensesInfo AS T005 ON
		T001.employeeNo =T005.employeeNo
		and
		reflectYearAndMonth = (SELECT
		MAX(reflectYearAndMonth) FROM
		T005ExpensesInfo)
		LEFT JOIN
		T007CustomerInfo AS T007 ON
		T006.customerNo =
		T007.customerNo,
		(SELECT
		@rowNo:=0) AS rowNo
	</sql>
	<!-- 住所情報を追加 -->
	<insert id="insertAddressInfo" parameterType="String">
		INSERT INTO
		T003AddressInfo (
		employeeNo,
		postcode,
		firstHalfAddress,
		lastHalfAddress,
		stationCode1,
		stationCode2,
		housingStatus,
		updateTime,
		createTime,
		updateUser
		)
		VALUES(
		#{employeeNo},
		#{postcode},
		#{firstHalfAddress},
		#{lastHalfAddress},
		(SELECT
		coalesce(stationCode,-1) from M013Station where
		stationName=#{nearestStation} ),
		null,
		null,
		NOW(),
		NOW(),
		#{updateUser}
		)
	</insert>
	<!-- ログイン -->
	<select id="getEmployeeModel" parameterType="map"
		resultMap="Employee">
		SELECT
		T001.employeeNo,
		T001.employeeFristName,
		T001.employeeLastName,
		T001.authorityCode,
		M009.authorityName
		FROM
		T001Employee T001
		LEFT JOIN M009Authority M009 ON T001.authorityCode = M009.authorityCode
		LEFT JOIN T002EmployeeDetail T002 ON T001.employeeNo = T002.employeeNo
		WHERE
		T001. PASSWORD = MD5(#{password})
		AND T001.employeeNo = #{employeeNo}
	</select>
	<!-- ログイン認証番号の電話番号存在チェック -->
	<select id="getEmployeePhoneNo" parameterType="String"
		resultMap="stringResult">
		SELECT
			phoneNo 
		FROM
			T002EmployeeDetail 
		WHERE
			employeeNo = #{employeeNo}
	</select>
</mapper>